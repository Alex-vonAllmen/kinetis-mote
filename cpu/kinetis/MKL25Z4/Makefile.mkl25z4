### Compiler definitions
AS       = arm-none-eabi-as
AR       = arm-none-eabi-ar
CC       = arm-none-eabi-gcc
LD       = arm-none-eabi-g++
OBJCOPY  = arm-none-eabi-objcopy
STRIP    = arm-none-eabi-strip
SIZE     = arm-none-eabi-size

### The linker script
ifndef MEM_SIZE
	MEM_SIZE = 128
endif

ifeq ($(MEM_SIZE), 32)
	LDSCRIPT = $(CONTIKI_CPU)/linker_files/MKL25Z32xxx4_flash.ld
endif
ifeq ($(MEM_SIZE), 64)
	LDSCRIPT = $(CONTIKI_CPU)/linker_files/MKL25Z64xxx4_flash.ld
endif
ifeq ($(MEM_SIZE), 128)
	LDSCRIPT = $(CONTIKI_CPU)/linker_files/MKL25Z128xxx4_flash.ld
endif

ARCHFLAGS += -mcpu=cortex-m0plus -mthumb -O0 -fmessage-length=0 -fsigned-char -ffunction-sections -fdata-sections  -g3
AFLAGS += $(ARCHFLAGS) -x assembler-with-cpp
CFLAGS += $(ARCHFLAGS) -std=c99

LDFLAGS += $(ARCHFLAGS)
LDFLAGS += -T $(LDSCRIPT)
LDFLAGS += -Xlinker --gc-sections
LDFLAGS += -Wl,-Map,$(TARGET).map -nanolibc

### CPU-dependent cleanup files
CLEAN += symbols.c symbols.h *.d *.elf

### CPU-dependent directories
CONTIKI_CPU_DIRS += . dev linker-files
CONTIKI_CPU_DIRS += ../includes

### CPU start files
TARGET_STARTFILES = ${addprefix $(OBJECTDIR)/, startup_MKL25Z4.o}

### CPU-dependent source files
CONTIKI_CPU_SOURCEFILES += system_MKL25Z4.c clock.c rtimer-arch.c slip_arch.c uart0.c
CONTIKI_CPU_SOURCEFILES += watchdog.c uip-ipchksum.c cc2520-arch.c cc2520-arch-sfd.c

CONTIKI_SOURCEFILES += $(CONTIKI_CPU_SOURCEFILES)

### Don't treat the .elf as intermediate
.PRECIOUS: %.elf %.bin

### Compilation rules

CUSTOM_RULE_C_TO_OBJECTDIR_O=1
$(OBJECTDIR)/%.o: %.c | $(OBJECTDIR)
	@echo 'Building file: $<'
	@echo 'Invoking: Cross ARM C Compiler'
	$(CC) $(CFLAGS) -MMD -MP -MF"$(@:%.o=%.d)" -MT"$@" -c -o "$@" "$<"
	@echo 'Finished building: $<'
	@echo ' '

CUSTOM_RULE_S_TO_OBJECTDIR_O=1
$(OBJECTDIR)/%.o: %.S | $(OBJECTDIR)
	@echo 'Building file: $<'
	@echo 'Invoking: Cross ARM GNU Assembler'
	$(CC) $(ASFLAGS) -MMD -MP -MF"$(@:%.o=%.d)" -MT"$@" -c -o "$@" "$<"
	@echo 'Finished building: $<'
	@echo ' '

CUSTOM_RULE_LINK=1
%.elf: %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a $(TARGET_STARTFILES)
	@echo 'Building target: $@'
	@echo 'Invoking: Cross ARM C Linker'
	$(LD) $(LDFLAGS) ${filter-out %.a,$^} \
	    ${filter %.a,$^} $(TARGET_LIBFILES) -o $@
	@echo 'Finished building target: $@'
	@echo ' '

%.hex: %.elf
	@echo 'Invoking: Cross ARM GNU Create Flash Image'
	$(OBJCOPY) -O ihex "$(TARGET).elf"  "$(TARGET).hex"
	@echo 'Finished building: $@'
	@echo ' '

%.siz: %.elf
	@echo 'Invoking: Cross ARM GNU Print Size'
	$(Q)$(SIZE) --format=berkeley -x "$(TARGET).elf"
	@echo 'Finished building: $@'
	@echo ' '

%.bin: %.elf
	$(OBJCOPY) $(OBJCOPY_FLAGS) $< $@

### We don't really need the .bin for the .$(TARGET) but let's make sure it
### gets built
%.$(TARGET): %.elf %.bin
	cp $< $@
